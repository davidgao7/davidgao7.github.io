<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on davidgao7 blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on davidgao7 blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Mar 2025 16:41:21 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Evolution of Route Planning in Urban Environments</title>
      <link>http://localhost:1313/posts/evolution-of-route-planning-in-urban-env/</link>
      <pubDate>Wed, 26 Mar 2025 16:41:21 -0400</pubDate>
      <guid>http://localhost:1313/posts/evolution-of-route-planning-in-urban-env/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Route planning is the backbone of modern transportation in megacities like Shanghai, enabling efficient navigation through complex road networks. Over the decades, the field has evolved from simple graph searches on static maps to sophisticated AI-driven systems that account for real-time data and even integrate large language models. This report provides a chronological overview of key route planning methods, from classical algorithms (breadth-first search, Dijkstra’s algorithm, etc.) to cutting-edge approaches (reinforcement learning, deep learning, and LLM-assisted planning). For each method, we summarize the main idea in one sentence, present core mathematical details (with annotated formulas), and give a theoretical example alongside a real-world example. We then discuss how Large Language Models (LLMs) are being incorporated into route planning (with academic and industrial citations), followed by an analysis of Baidu’s advancements in route planning (including deployments in cities like Shanghai and performance metrics). Finally, we compare Baidu’s work with global leaders (Google, Tesla, Amazon, Apple), identify gaps and their causes (data, regulatory, tech stack), and suggest steps to bridge these gaps. Key breakthroughs and paradigm shifts are highlighted throughout. Relevant codebases (especially Python implementations) are linked for further exploration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Build N8n Agent From Scratch</title>
      <link>http://localhost:1313/posts/how-to-build-n8n-agent-from-scratch/</link>
      <pubDate>Sat, 22 Mar 2025 15:09:57 -0400</pubDate>
      <guid>http://localhost:1313/posts/how-to-build-n8n-agent-from-scratch/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This is the tutorial on how to build an n8n agent from scratch.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;In this tutorial, I will show how to build an simple n8n agent locally.&lt;/p&gt;&#xA;&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.n8n.io/integrations/builtin/credentials/ollama/?utm_source=n8n_app&amp;amp;utm_medium=credential_settings&amp;amp;utm_campaign=create_new_credentials_modal#using-instance-url&#34;&gt;self-host ollama&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ollama/ollama/blob/main/docs/faq.md#how-can-i-allow-additional-web-origins-to-access-ollama&#34;&gt;allow different web origins to access ollama&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ollama/ollama/blob/main/docs/faq.md#how-do-i-configure-ollama-server&#34;&gt;how to configure ollama server&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.n8n.io/hosting/starter-kits/ai-starter-kit/#what-you-can-build&#34;&gt;self-hosted AI Starter Kit | n8n Docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/n8n-io/self-hosted-ai-starter-kit?tab=readme-ov-file#-video-walkthrough&#34;&gt;self-hosted AI video walkthrough&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;steps&#34;&gt;Steps&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-install-n8n-on-docker&#34;&gt;1. Install n8n on docker&lt;/h2&gt;&#xA;&lt;p&gt;start n8n&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker volume create n8n_data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once running, you can access n8n by opening: &lt;a href=&#34;http://localhost:5678&#34;&gt;http://localhost:5678&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Word Abbreviation</title>
      <link>http://localhost:1313/posts/valid-word-abbr/</link>
      <pubDate>Wed, 12 Mar 2025 22:47:23 -0400</pubDate>
      <guid>http://localhost:1313/posts/valid-word-abbr/</guid>
      <description>&lt;h1 id=&#34;9197bbc079a9-valid-word-abbr&#34;&gt;9197bbc079a9-valid-word-abbr&lt;/h1&gt;&#xA;&lt;h3 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h3&gt;&#xA;&lt;p&gt;A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.&lt;/p&gt;&#xA;&lt;p&gt;For example, a string such as &lt;code&gt;&amp;quot;substitution&amp;quot;&lt;/code&gt; could be abbreviated as (but not limited to):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;quot;s10n&amp;quot;&lt;/code&gt; (&lt;code&gt;&amp;quot;s ubstitutio n&amp;quot;&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;quot;sub4u4&amp;quot;&lt;/code&gt; (&lt;code&gt;&amp;quot;sub stit u tion&amp;quot;&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;quot;12&amp;quot;&lt;/code&gt; (&lt;code&gt;&amp;quot;substitution&amp;quot;&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;quot;su3i1u2on&amp;quot;&lt;/code&gt; (&lt;code&gt;&amp;quot;su bst i t u ti on&amp;quot;&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;quot;substitution&amp;quot;&lt;/code&gt; (no substrings replaced)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The following are &lt;strong&gt;not valid&lt;/strong&gt; abbreviations:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Syntax Learning</title>
      <link>http://localhost:1313/posts/go-syntax-learning/</link>
      <pubDate>Sun, 02 Mar 2025 16:56:04 -0500</pubDate>
      <guid>http://localhost:1313/posts/go-syntax-learning/</guid>
      <description>&lt;h1 id=&#34;1740954205-344-reverse-string&#34;&gt;1740954205-344-reverse-string&lt;/h1&gt;&#xA;&lt;h2 id=&#34;question-description&#34;&gt;Question Description&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-string/description/&#34;&gt;problem link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://neetcode.io/solutions/reverse-string&#34;&gt;solution video link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;thought-process&#34;&gt;Thought Process&lt;/h2&gt;&#xA;&lt;p&gt;nice this is an easy problem, good for getting used to go syntax&lt;/p&gt;&#xA;&lt;p&gt;In Go, you specify the type for a variable when you need to explicitly declare its type. However, Go also supports type inference, where the type is automatically determined based on the assigned value. Here are some guidelines:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Explicit Type Declaration:&lt;/strong&gt;&#xA;Use this when you want to specify the type explicitly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Divide Arr Into Arrs With Max Diff</title>
      <link>http://localhost:1313/posts/divide-arr-into-arr-with-max-diff/</link>
      <pubDate>Tue, 25 Feb 2025 17:28:44 -0500</pubDate>
      <guid>http://localhost:1313/posts/divide-arr-into-arr-with-max-diff/</guid>
      <description>&lt;h1 id=&#34;divide-array-into-arrays-with-max-difference&#34;&gt;divide-array-into-arrays-with-max-difference&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Date created: 2025-02-25-Tue 11:11&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;question-description&#34;&gt;Question Description&lt;/h2&gt;&#xA;&lt;p&gt;You are given an integer array nums of size n where n is a multiple of 3 and a positive integer k.&lt;/p&gt;&#xA;&lt;p&gt;Divide the array nums into n / 3 arrays of size 3 satisfying the following condition:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;The difference between any two elements in one array is less than or equal to k.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Return a 2D array containing the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Symmetric Tree</title>
      <link>http://localhost:1313/posts/symmetric-tree/</link>
      <pubDate>Sun, 16 Feb 2025 17:02:01 -0500</pubDate>
      <guid>http://localhost:1313/posts/symmetric-tree/</guid>
      <description>&lt;h2 id=&#34;question-description&#34;&gt;Question Description&lt;/h2&gt;&#xA;&lt;p&gt;Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).&lt;/p&gt;&#xA;&lt;p&gt;Example 1:&lt;/p&gt;&#xA;&lt;p&gt;Input: root = [1,2,2,3,4,4,3]&#xA;Output: true&lt;/p&gt;&#xA;&lt;p&gt;Example 2:&lt;/p&gt;&#xA;&lt;p&gt;Input: root = [1,2,2,null,3,null,3]&#xA;Output: false&lt;/p&gt;&#xA;&lt;p&gt;Constraints:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The number of nodes in the tree is in the range [ [1, 1000] ].&#xA;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Follow up: Could you solve it both recursively and iteratively?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Local Rag Ollama</title>
      <link>http://localhost:1313/posts/local-rag-ollama/</link>
      <pubDate>Fri, 14 Feb 2025 15:19:01 -0500</pubDate>
      <guid>http://localhost:1313/posts/local-rag-ollama/</guid>
      <description>&lt;h1 id=&#34;local-lightrag-a-graphrag-alternative-but-fully-local-with-ollama&#34;&gt;Local LightRAG: a GraphRAG Alternative but Fully Local with Ollama&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HKUDS/LightRAG&#34;&gt;repo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=g21royNJ4fw&#34;&gt;demo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Install from source (Recommend)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd LightRAG&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install -e .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Install from PyPI&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install lightrag-hku&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=g21royNJ4fw&#34;&gt;Video demo&lt;/a&gt; of running LightRAG locally.&lt;/li&gt;&#xA;&lt;li&gt;All the code can be found in the &lt;code&gt;examples&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Set OpenAI API key in environment if using OpenAI models: &lt;code&gt;export OPENAI_API_KEY=&amp;quot;sk-...&amp;quot;.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Download the demo text &amp;ldquo;A Christmas Carol by Charles Dickens&amp;rdquo;:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl https://raw.githubusercontent.com/gusye1234/nano-graphrag/main/tests/mock_data.txt &amp;gt; ./book.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the below Python snippet (in a script) to initialize LightRAG and perform queries:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grafana Prometheus</title>
      <link>http://localhost:1313/posts/grafana-prometheus/</link>
      <pubDate>Sun, 09 Feb 2025 14:10:48 -0500</pubDate>
      <guid>http://localhost:1313/posts/grafana-prometheus/</guid>
      <description>&lt;h1 id=&#34;preparing&#34;&gt;Preparing&lt;/h1&gt;&#xA;&lt;ol start=&#34;0&#34;&gt;&#xA;&lt;li&gt;install helm, the package manager for Kubernetes&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://helm.sh/&#34;&gt;web&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://helm.sh/docs/intro/install/&#34;&gt;install guide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt; get_helm.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./get_helm.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;➜  homelab git:(master) ✗ ./get_helm.sh&#xA;Downloading https://get.helm.sh/helm-v3.17.0-linux-amd64.tar.gz&#xA;Verifying checksum... Done.&#xA;Preparing to install helm into /usr/local/bin&#xA;helm installed into /usr/local/bin/helm&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/prometheus-community/helm-charts&#34;&gt;repo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;get Helm Repo info&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add prometheus-community https://prometheus-community.github.io/helm-charts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;#34;prometheus-community&amp;#34; has been added to your repositories&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Hang tight while we grab the latest from your chart repositories...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...Successfully got an update from the &amp;#34;prometheus-community&amp;#34; chart repository&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update Complete. ⎈Happy Helming!⎈&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;see &lt;a href=&#34;https://helm.sh/docs/helm/helm_repo/&#34;&gt;helm repo&lt;/a&gt; for command documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Virtual Machine</title>
      <link>http://localhost:1313/posts/virtual-machine/</link>
      <pubDate>Sat, 08 Feb 2025 01:48:34 -0500</pubDate>
      <guid>http://localhost:1313/posts/virtual-machine/</guid>
      <description>&lt;h1 id=&#34;common-problem-for-ubuntudebian-based-system&#34;&gt;Common problem for Ubuntu/Debian-based system&lt;/h1&gt;&#xA;&lt;p&gt;The error message you&amp;rsquo;re encountering:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Failed to restart sshd.service: Unit sshd.service not found.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;indicates that the &lt;code&gt;sshd.service&lt;/code&gt; unit is not recognized by your system&amp;rsquo;s service manager. This is common in certain Linux distributions, such as Ubuntu, where the SSH service is managed under a different name.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;On Ubuntu and Debian-based systems, the SSH service is typically managed as &lt;code&gt;ssh&lt;/code&gt; instead of &lt;code&gt;sshd&lt;/code&gt;. To restart the SSH service after making configuration changes, use the following command:&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP Rust</title>
      <link>http://localhost:1313/posts/tcp-rust/</link>
      <pubDate>Fri, 07 Feb 2025 22:35:50 -0500</pubDate>
      <guid>http://localhost:1313/posts/tcp-rust/</guid>
      <description>&lt;h1 id=&#34;tcpimplementation&#34;&gt;TCPImplementation&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bzja9fQWzdA&amp;amp;list=PLqbS7AVVErFivDY3iKAQk3_VAm8SXwt1X&amp;amp;index=2&amp;amp;t=206s&#34;&gt;video&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;project-goal&#34;&gt;Project Goal&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Learn how to write rust&lt;/li&gt;&#xA;&lt;li&gt;Learn how to implement TCP protocal&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Implement TCP in Rust&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/personalProjects/TCP-rust-issue-face-and-fixing.md&#34;&gt;TCP-rust-issue-face-and-fixing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For this page, I will take notes on tcp concepts&lt;/p&gt;&#xA;&lt;h2 id=&#34;getting-the-basics&#34;&gt;Getting the basics&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-three-way-handshake-connection-establishment&#34;&gt;&lt;strong&gt;1. Three-Way Handshake (Connection Establishment)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;The TCP connection starts with the &lt;strong&gt;SYN → SYN-ACK → ACK&lt;/strong&gt; process.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ascii&#34; data-lang=&#34;ascii&#34;&gt;Client                               Server&#xA;   |                                   |&#xA;   | ---------- SYN ----------&amp;gt;        |  (Client requests connection)&#xA;   |                                   |&#xA;   | &amp;lt;-------- SYN-ACK --------        |  (Server acknowledges)&#xA;   |                                   |&#xA;   | ---------- ACK ----------&amp;gt;        |  (Client confirms connection)&#xA;   |                                   |&#xA;Connection Established!&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;SYN&lt;/strong&gt;: Client sends a connection request to the server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SYN-ACK&lt;/strong&gt;: Server acknowledges the request and sends its own connection request.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt;: Client acknowledges the server&amp;rsquo;s response.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-data-transmission&#34;&gt;&lt;strong&gt;2. Data Transmission&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Once the connection is established, data flows in both directions with sequence numbers and acknowledgments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Array Summary</title>
      <link>http://localhost:1313/posts/array-summary/</link>
      <pubDate>Fri, 07 Feb 2025 22:32:04 -0500</pubDate>
      <guid>http://localhost:1313/posts/array-summary/</guid>
      <description>&lt;h1 id=&#34;数组&#34;&gt;数组&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;数组是存放在连续内存空间上的相同类型数据的组合&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数组内存空间的地址是连续的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#39;https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%84.png&#39; width=600&gt; &lt;/img&gt;&lt;/div&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正是因为&lt;strong&gt;数组的在内存空间的地址是连续的， 所以我们在删除或者增添元素的时候， 难免要移动其他元素的地址&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#39;https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png&#39; width=600&gt; &lt;/img&gt;&lt;/div&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二维数组&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#39;https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%842.png&#39; width=600&gt; &lt;/img&gt;&lt;/div&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;二维数据在内存中不是 &lt;code&gt;3*4&lt;/code&gt; 的连续地址空间，而是四条连续的地址空间组成！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;经典例题&#34;&gt;经典例题&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;[704] &lt;a href=&#34;https://leetcode-cn.com/problems/binary-search/&#34;&gt;二分查找&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;[27] &lt;a href=&#34;https://leetcode-cn.com/problems/remove-element/&#34;&gt;移除元素&lt;/a&gt; (双指针)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;[209] &lt;a href=&#34;https://leetcode-cn.com/problems/minimum-size-subarray-sum/&#34;&gt;长度最小的子数组&lt;/a&gt; (滑动窗口)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html&#34;&gt;数组：这个循环可以转懵很多人！&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;模拟类的题目在数组中很常见，不涉及到什么算法，就是单纯的模拟，十分考察大家对代码的掌控能力。&#xA;在这道题目中，我们再一次介绍到了&lt;strong&gt;循环不变量原则&lt;/strong&gt;，其实这也是写程序中的重要原则。&#xA;相信大家又遇到过这种情况： 感觉题目的边界调节超多，一波接着一波的判断，找边界，踩了东墙补西墙，好不容易运行通过了，代码写的十分冗余，毫无章法，其实&lt;strong&gt;真正解决题目的代码都是简洁的，或者有原则性的&lt;/strong&gt;，大家可以在这道题目中体会到这一点。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;source&#34;&gt;source&lt;/h4&gt;&#xA;&lt;p&gt;代码随想录螺旋矩阵，这题蛮绕的，多看看&lt;/p&gt;</description>
    </item>
    <item>
      <title>Copy Random List</title>
      <link>http://localhost:1313/posts/copy-random-list/</link>
      <pubDate>Fri, 07 Feb 2025 22:30:57 -0500</pubDate>
      <guid>http://localhost:1313/posts/copy-random-list/</guid>
      <description>&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;请实现 &lt;code&gt;copyRandomList&lt;/code&gt; 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 &lt;code&gt;random&lt;/code&gt; 指针指向链表中的任意节点或者 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;解题思路&#34;&gt;解题思路&lt;/h2&gt;&#xA;&lt;p&gt;乍得一看很迷惑的题, 我们直接return head行不行？ 不行。这样address和原linkedlist都是一样的，题目就会知道你在搞事情。&lt;/p&gt;&#xA;&lt;p&gt;那么我们现在就明确了目标：deep copy一个list， 根据题目定义，这个list的structure为&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; random;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _val){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      random &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; 在 C++11里，没有&lt;code&gt;NULL&lt;/code&gt;，我们统一用&lt;code&gt;nullptr&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; random;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _val){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      random &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来看看我们怎么copy这个list的：这个list向linkedlist，我们做的时候还是不要忘记之前对linkedlist的操作&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binary Tree Path Sum</title>
      <link>http://localhost:1313/posts/binary-tree-path-sum/</link>
      <pubDate>Fri, 07 Feb 2025 22:29:31 -0500</pubDate>
      <guid>http://localhost:1313/posts/binary-tree-path-sum/</guid>
      <description>&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;给定一个节点数为 n 的二叉树和一个值 sum ，请找出所有的根节点到叶子节点的节点值之和等于的路径，如果没有则返回空。&lt;/p&gt;&#xA;&lt;p&gt;例如：&#xA;给出如下的二叉树，sum = 22 ，&lt;/p&gt;&#xA;&lt;p&gt;given:&#xA;&lt;img src=&#34;http://localhost:1313/images/pathSumEg.png&#34; alt=&#34;binary tree&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;return&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[&#xA;  [5,4,11,2],&#xA;  [5,8,9]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Space complexity: O(n)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Time complexity: O(n)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;解题思路&#34;&gt;解题思路&lt;/h2&gt;&#xA;&lt;p&gt;题目是想让你一条一条路径找到和为sum的路径们，那我们学过的bfs(breath first search) 和 dfs(depth first search) 趁现在来复习一下&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s the definition of BFS (ch 22.2 Introduction to Algorithms):&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Given a graph G = (V,E) and a distinguished &lt;strong&gt;source&lt;/strong&gt; vertex s, breadth-first search systematically explores the edges of G to &amp;lsquo;discover&amp;rsquo; every vertex that is &lt;strong&gt;reachable&lt;/strong&gt; from s.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find Kth Largest</title>
      <link>http://localhost:1313/posts/find-kth-largest/</link>
      <pubDate>Fri, 07 Feb 2025 22:27:31 -0500</pubDate>
      <guid>http://localhost:1313/posts/find-kth-largest/</guid>
      <description>&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;经典题目&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。&lt;/p&gt;&#xA;&lt;p&gt;请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;示例 1:&#xA;&#xA;&#xA;输入: [3,2,1,5,6,4] 和 k = 2&#xA;输出: 5&#xA;&#xA;&#xA;示例 2:&#xA;&#xA;&#xA;输入: [3,2,3,1,2,4,5,5,6] 和 k = 4&#xA;输出: 4&#xA;&#xA;&#xA;&#xA;提示：&#xA;&#xA;&#xA;1 &amp;lt;= k &amp;lt;= nums.length &amp;lt;= 10⁴&#xA;-10⁴ &amp;lt;= nums[i] &amp;lt;= 10⁴&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findKthLargest&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# write code here&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# quick select&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# choosinig pivoit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pivoit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# divide&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums[pivoit]]  &lt;span style=&#34;color:#75715e&#34;&gt;# remember to use a[pivoit] instead of pivoit which is a index not actual number!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[pivoit]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[pivoit]]  &lt;span style=&#34;color:#75715e&#34;&gt;# find the largest first 从大到小&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l, m, r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(left), len(mid), len(right)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# if k in the left arr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; l:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findKthLargest(left, k)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# if k on the right side&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findKthLargest(right, k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# otherwise it means the mid # is the kth largest&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Rob</title>
      <link>http://localhost:1313/posts/rob/</link>
      <pubDate>Fri, 07 Feb 2025 22:24:33 -0500</pubDate>
      <guid>http://localhost:1313/posts/rob/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;&#xA;&lt;p&gt;小偷偷钱，怎样偷实现最多。&lt;/p&gt;&#xA;&lt;p&gt;给定一个代表每个房屋存放金额的非负整数组，计算你在不触动警报装置的情况下， 今晚能够偷窃到的&lt;em&gt;最高金额&lt;/em&gt;。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;e.g.1&#xA;输入：nums = [2,3,2]&#xA;输出：3&#xA;&#xA;解释：&#xA;[2,3,2]&#xA; 0 1 2&#xA;房屋首尾相连，位置0 和 位置2 不能同时碰， 但是如果只碰第一个或者第三个就没有偷第二个的金额多，所以选择只偷第二个&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;e.g.2&#xA;输入：nums = [1,2,3,1]&#xA;输出：4&#xA;&#xA;解释：&#xA;先偷1，再偷3，因为1，3不相邻，而且1+3 比 2+1 大&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rob&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 计算从 n 开始能得到的最大rob&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;robRange&lt;/span&gt;(start: int, end: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[start]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        second &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(nums[start], nums[start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])  &lt;span style=&#34;color:#75715e&#34;&gt;# 选择从第一个还是第二个开始&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            first, second &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; second, max(first &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i], second) &lt;span style=&#34;color:#75715e&#34;&gt;# 得到结果后作为下一个取舍的input&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; second &lt;span style=&#34;color:#75715e&#34;&gt;# 最终的两组的最后一个作为取舍结果&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 主程序&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(robRange(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), robRange(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# robRange也可以用 nums&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Jump Game</title>
      <link>http://localhost:1313/posts/jump-game/</link>
      <pubDate>Fri, 07 Feb 2025 22:23:06 -0500</pubDate>
      <guid>http://localhost:1313/posts/jump-game/</guid>
      <description>&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;给定一个non-negative array &lt;code&gt;nums&lt;/code&gt;, 你最初位于数组的&lt;strong&gt;第一个下标&lt;/strong&gt;。数组中的每个元素代表你在该位置可以跳跃的最大长度。&lt;/p&gt;&#xA;&lt;p&gt;判断你是否能够&lt;em&gt;到达最后一个下标&lt;/em&gt;。&lt;/p&gt;&#xA;&lt;p&gt; 示例1:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入： nums = [2,3,1,1,4]&#xA;输出： true&#xA;解释： 可以先跳1步， 从下标0到下标1， 然后再从下标1跳3步到达最后一个下标。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入： nums = [3,2,1,0,4]&#xA;输出： false&#xA;解释： 最开始为3就决定了你至多只能走到0，永远都到达不了最后一个&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canJump&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; nums) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 关键：可跳的范围&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 问题转化为：跳跃范围能不能覆盖到终点&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//base case&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nums.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 覆盖范围: 看看能不能覆盖到终点&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; coverRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//最开始至多能走几步&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;coverRange;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//i+nums[i]: 能跳的范围&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            coverRange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(coverRange, i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 如果中途到了&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(coverRange &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; nums.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Minimum Length Encoding</title>
      <link>http://localhost:1313/posts/minimum-length-encoding/</link>
      <pubDate>Fri, 07 Feb 2025 22:21:31 -0500</pubDate>
      <guid>http://localhost:1313/posts/minimum-length-encoding/</guid>
      <description>&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;Array &lt;code&gt;words&lt;/code&gt; 的&lt;strong&gt;有效编码&lt;/strong&gt;由任意 string 和下标数组&lt;code&gt;indices&lt;/code&gt;组成，&#xA;满足：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;words.length == indices.length&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;助级 string &lt;code&gt;s&lt;/code&gt; 以 &lt;code&gt;&#39;#&#39;&lt;/code&gt; 结尾&lt;/li&gt;&#xA;&lt;li&gt;对于每个下标 &lt;code&gt;indices[i]&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;的一个从&lt;code&gt;indices[i]&lt;/code&gt; 开始，到下一个&lt;code&gt;&#39;#&#39;&lt;/code&gt; 字符结束（但不包括 &lt;code&gt;&#39;#&#39;&lt;/code&gt;）的 &lt;strong&gt;子字符串&lt;/strong&gt; 恰好与 &lt;code&gt;words[i]&lt;/code&gt; 相等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;给你一个单词数组 &lt;code&gt;words&lt;/code&gt;, 返回成功对 &lt;code&gt;words&lt;/code&gt; 进行编码的&lt;strong&gt;最小&lt;/strong&gt; 助记字符串 &lt;code&gt;s&lt;/code&gt; 的长度。&lt;/p&gt;&#xA;&lt;p&gt;Example 1&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input: words = [&amp;#34;time&amp;#34;, &amp;#34;me&amp;#34;, &amp;#34;bell&amp;#34;]&#xA;Output: 10&#xA;&#xA;解释：&#xA;有效编码为 “time#bell#” , indices = [0, 2, 5]&#xA;&#xA;words[0] = &amp;#34;time&amp;#34;, indices = 0，substring 从 index 0 开始&#xA;words[1] = &amp;#34;me&amp;#34;, the substring of s starting from indices[1] = 2&#xA;to the next &amp;#39;#&amp;#39; is in &amp;#34;ti[me]#bell#&amp;#34;&#xA;words[2] = &amp;#34;bell&amp;#34;, start from indices[2] = 5 to the next &amp;#39;#&amp;#39; is in &amp;#34;time#[bell]#&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example 2&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lowest Common Ancestor</title>
      <link>http://localhost:1313/posts/lowest-common-ancestor/</link>
      <pubDate>Fri, 07 Feb 2025 20:54:23 -0500</pubDate>
      <guid>http://localhost:1313/posts/lowest-common-ancestor/</guid>
      <description>&lt;!-- 感想 --&gt;&#xA;&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;给定一棵二叉树(保证非空)以及这棵树上的两个节点对应的val值 o1 和 o2，请找到 o1 和 o2 的最近公共祖先节点。&#xA;注：本题保证二叉树中每个节点的val值均不相同。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;e.g.&#xA;输入：[3,5,1,6,2,0,8,#,#,7,4],5,1&#xA;输出：3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;题目思路&#34;&gt;题目思路&lt;/h2&gt;&#xA;&lt;p&gt;做这道题首先得理解潜在意思：两个节点的最近公共祖先&lt;/p&gt;&#xA;&lt;p&gt;题目要求查找的两个节点为&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;5&lt;/li&gt;&#xA;&lt;li&gt;1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;从图上我们可以知道距离5，1上方最近的是3，也就是说Node 5 与 Node 3 的common ancestor是3&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;怎样能首先检查 child， 然后再检查 parent 呢？&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;font color=red&gt;&lt;code&gt;L(child) R(child) N(parent)： Post order&lt;/code&gt;&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# bottom up lookup&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# post order : L R N&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# common ancestor: node.left=o1 and node.right=o2 or inverse&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# we can check L=o1,R=o2, then take the Node N using post order traversal&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 如果在root找到o1 or o2 or null, 说明此时root为祖先&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; o1 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; o2:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 左右subtree两个方向一起找,看看在左subtree还是右subtree&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;helper(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, o1, o2)  &lt;span style=&#34;color:#75715e&#34;&gt;# L&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;helper(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, o1, o2)  &lt;span style=&#34;color:#75715e&#34;&gt;# R&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 如果其中一边有，recursive的值要通过非Null的来返回，所以return非Null值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# NOTE：not left &amp;lt;===&amp;gt; left == None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; left: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; right&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; right: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; left&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#         if left == None: return right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#         if right == None: return left&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 如果都没有，就返回啥都没有&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# elif not left and not right: 这代表两个都是空，说明没做到，本身就是空的，return就行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>MaxLength</title>
      <link>http://localhost:1313/posts/maxlength/</link>
      <pubDate>Fri, 07 Feb 2025 20:52:49 -0500</pubDate>
      <guid>http://localhost:1313/posts/maxlength/</guid>
      <description>&lt;!-- 感想 --&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;一步一个脚印，现在就是最艰难的时刻，不要懒，不要脸往前冲就行了&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;给定一个数组arr， 返回arr的&lt;em&gt;最长&lt;/em&gt; &lt;em&gt;无重复&lt;/em&gt; 子数组的长度，&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;e.g. 1&lt;/p&gt;&#xA;&lt;p&gt;a = [1, 3, 5, 7, 9]&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; sublist: [1, 3]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; sublist: [3, 5, 7]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; not a sublist: [1, 3, 7]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;最长无重复子数组(maxLength)：[1, 3, 5, 7, 9]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;e.g. 2&lt;/p&gt;&#xA;&lt;p&gt;a = [2, 2, 3, 4, 3]&lt;/p&gt;&#xA;&lt;p&gt;a_max = [2, 3, 4]&lt;/p&gt;&#xA;&lt;p&gt;maxLength = 3&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;题目思路&#34;&gt;题目思路&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一开始，我看到了&lt;code&gt;无重复&lt;/code&gt;，set不会有重复，但是set不能保证你拿的是连续的，不是连续的也就不能称之为sublist&lt;/li&gt;&#xA;&lt;li&gt;接着，我试了暴力解法，会超时，思路是双指针，右指针没有重复就右移， 有重复左指针向右移动一个防止漏掉前面的可能性&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个解法缺点是每一次指针移动都要检查答案是否可行，每一次检查又要loop从左指针到右指针，总共需要O(mn), polynomial time.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;首先要无重复， 那么我们一旦找到了重复的数字，由于需要return&lt;strong&gt;连续&lt;/strong&gt;的subarray，我们就只能去掉所有在第一个重复的数的后方的所有元素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;找到无重复sublist：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arr:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; l:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后我们在考虑怎样得到最长sublist：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Heap Bst</title>
      <link>http://localhost:1313/posts/heap-bst/</link>
      <pubDate>Fri, 07 Feb 2025 20:50:52 -0500</pubDate>
      <guid>http://localhost:1313/posts/heap-bst/</guid>
      <description>&lt;h1 id=&#34;binary-search-tree-vs-heap&#34;&gt;Binary Search Tree vs. Heap&lt;/h1&gt;&#xA;&lt;p&gt;Can&amp;rsquo;t remember what&amp;rsquo;s the difference between heap &amp;amp; BST all the sudden&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-we-should-know&#34;&gt;What we should know&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Definition&lt;/li&gt;&#xA;&lt;li&gt;Big-O complexity&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;font color=red&gt;Binary Search Tree&lt;/font&gt; is a data structure that allows for fast &lt;strong&gt;insertion&lt;/strong&gt;, &lt;strong&gt;removal&lt;/strong&gt;, and &lt;strong&gt;lookup&lt;/strong&gt; of items while offering an &lt;em&gt;efficient&lt;/em&gt; way to iterate them in &lt;em&gt;sorted&lt;/em&gt; order&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;font color=red&gt;Heap&lt;/font&gt; is a &lt;strong&gt;complete&lt;/strong&gt; binary tree&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;What is a &lt;code&gt;complete binary tree&lt;/code&gt;?&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;font color=red&gt;complete&lt;/font&gt; binary tree is a &lt;strong&gt;balanced&lt;/strong&gt; binary tree&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merge K Sorted Lists</title>
      <link>http://localhost:1313/posts/merge-k-sorted-lists/</link>
      <pubDate>Fri, 07 Feb 2025 20:49:10 -0500</pubDate>
      <guid>http://localhost:1313/posts/merge-k-sorted-lists/</guid>
      <description>&lt;!-- 感想 --&gt;&#xA;&lt;p&gt;就这一道题揪出了我的短板，虽然一直被强调什么语言都无所谓，能用就行，但是没有pointer我就不知道怎么更新了，这回有ptr的语言和没有的我都写，都好好理解一下，看看到底有什么“难处”！&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;这鬼题花了我两天时间！不好好整理一下（语言和思路）都对不起这时间！&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了补偿自己花费的更多时间，今天写两种方法&lt;/p&gt;&#xA;&lt;!-- 感想 --&gt;&#xA;&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;Given k sorted linked lists, combine them into a single linked list.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Given&#xA;l1: 1 -&amp;gt; 2 -&amp;gt; 5&#xA;l2: 0 -&amp;gt; 8 -&amp;gt; 3&#xA;l3: 3 -&amp;gt; 4&#xA;&#xA;return&#xA;l: 0 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5 -&amp;gt; 8&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;题目思路&#34;&gt;题目思路&lt;/h2&gt;&#xA;&lt;p&gt;Different from regular sorting problem, we are having linked lists, which are user&#xA;defined structure, we can&amp;rsquo;t have as much freedom as we did when we have the regular&#xA;data structure like arrays or lists.&#xA;We can expected that we will spend some time on thinking how we update element.&lt;/p&gt;</description>
    </item>
    <item>
      <title>BinaryTree Output Levely</title>
      <link>http://localhost:1313/posts/binarytree-output-levely/</link>
      <pubDate>Fri, 07 Feb 2025 20:47:06 -0500</pubDate>
      <guid>http://localhost:1313/posts/binarytree-output-levely/</guid>
      <description>&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;给你一个二叉树，要求一层一层get这个二叉树的层序遍历的结果&lt;/p&gt;&#xA;&lt;p&gt;e.g. Given binary tree: {3,9,20,#,#,15,7}， 在code里是OOP的Tree来写的&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;in order traversal result:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[&#xA;  [3],&#xA;  [9, 20],&#xA;  [15, 7]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意TreeNode的定义，没有child的情况child为&lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目思路&#34;&gt;题目思路&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无论何时都得照顾好base case&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果给的tree结构里一个node也没有，我们不用担心什么，直接return 空[]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;levelOrder&lt;/span&gt;(self, root):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; root:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;之后， 我们用python list.pop(index=)来拿到我们想要的current node。 注意一下 &lt;strong&gt;pop()&lt;/strong&gt; 和 &lt;strong&gt;pop(0)&lt;/strong&gt; 的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;pop()&lt;/strong&gt; 是取list中最后一个元素&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;pop(0)&lt;/strong&gt; 是取list中1st元素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3]&#xA;&amp;gt;&amp;gt;&amp;gt; print(a.pop())&#xA;3&#xA;&amp;gt;&amp;gt;&amp;gt; print(a.pop(0))&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;font color=green&gt;Note: &lt;/font&gt;&#xA;平时用不太熟悉的语言时遇到不确定的语法可以到terminal上玩一下当作测试，也节省了上网查找浪费的时间&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注意append node的顺序，我们首先append left child 然后 right child， 因为我们是被要求一层一层从左到右存放的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left: queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right: queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个过程是在遍历时先去左边的树再去右边的。按照题目规定&lt;strong&gt;每层&lt;/strong&gt;print时要从左往右储存。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SVM</title>
      <link>http://localhost:1313/posts/svm/</link>
      <pubDate>Fri, 07 Feb 2025 20:44:54 -0500</pubDate>
      <guid>http://localhost:1313/posts/svm/</guid>
      <description>&lt;h1 id=&#34;support-vector-machine-classifier&#34;&gt;Support Vector Machine (Classifier)&lt;/h1&gt;&#xA;&lt;p&gt;suggest readings:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Alpaydin: 10.3, 13.1, 13.2&lt;/li&gt;&#xA;&lt;li&gt;Murphy: 14.5.2.2&lt;/li&gt;&#xA;&lt;li&gt;Geron: chapter 5, appendix C&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;alpaydin-阅读笔记&#34;&gt;Alpaydin 阅读笔记&lt;/h2&gt;&#xA;&lt;h3 id=&#34;geometry-of-the-linear-discriminant-线性可区分的图像&#34;&gt;Geometry of the Linear Discriminant （线性可区分的图像）&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从一个简单的 two classes 情况开始解析，在这种情况下，单个的区分方程已经足够：&lt;/li&gt;&#xA;&lt;li&gt;Discriminant between two classes:&#xA;$$&#xA;\begin{equation}\label{Discriminant_between_two_classes}&#xA;\begin{split}&#xA;g(\chi) &amp;= g_1(\chi) - g_2(\chi)\\&#xA;        &amp;= ((w_1)^T\chi + w_{10}) - ((w_2)^T\chi + w_{20})\\&#xA;        &amp;= (w_1 - w_2)^T\chi + (w_{10} - w_{20})\\&#xA;        &amp;= w^T\chi + w_0&#xA;\end{split}&#xA;\end{equation}&#xA;$$&lt;/li&gt;&#xA;&lt;li&gt;we choose&#xA;$$&#xA;\left.&#xA;        \begin{matrix}&#xA;            C_1,\text{ }g(\chi) &gt; 0\\&#xA;            C_2,\text{ }otherwise&#xA;        \end{matrix}&#xA;\right\}&#xA;$$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;weight vector threshold&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shortest Bridge</title>
      <link>http://localhost:1313/posts/shortest-bridge/</link>
      <pubDate>Fri, 07 Feb 2025 20:43:22 -0500</pubDate>
      <guid>http://localhost:1313/posts/shortest-bridge/</guid>
      <description>&lt;!-- 深度优先搜索 广度优先搜索 数组 矩阵 --&gt;&#xA;&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;在给定的二维二进制数组 A 中，存在两座岛。（岛是由四面相连的 1 形成的一个最大组。）&lt;/p&gt;&#xA;&lt;p&gt;现在，我们可以将0 变为 1，以使两座岛连接起来，变成一座岛。&lt;/p&gt;&#xA;&lt;p&gt;返回必须翻转的 0 的最小数目。（可以保证答案至少是 1 。）&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;示例 1：&#xA;&#xA;&#xA;输入：A = [[0,1],[1,0]]&#xA;输出：1&#xA;&#xA;&#xA;示例 2：&#xA;&#xA;&#xA;输入：A = [[0,1,0],[0,0,0],[0,0,1]]&#xA;输出：2&#xA;&#xA;&#xA;示例 3：&#xA;&#xA;&#xA;输入：A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]&#xA;输出：1&#xA;&#xA;&#xA;&#xA;提示：&#xA;&#xA;&#xA;2 &amp;lt;= A.length == A[0].length &amp;lt;= 100&#xA;A[i][j] == 0 或 A[i][j] == 1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shortestBridge&lt;/span&gt;(self, grid: List[List[int]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(grid: List[List[int]], x: int, y: int, queue: List):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 如果没有visit，标记为visit，接着想四周扩&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(grid) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(grid[x]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[x][y] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                grid[x][y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 2: visited&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([x, y]) &lt;span style=&#34;color:#75715e&#34;&gt;# add visited island to queue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 向四个方向延伸找终点&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dfs(grid, x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, y, queue)  &lt;span style=&#34;color:#75715e&#34;&gt;# up&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dfs(grid, x, y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, queue)  &lt;span style=&#34;color:#75715e&#34;&gt;# left&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dfs(grid, x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, y, queue)  &lt;span style=&#34;color:#75715e&#34;&gt;# down&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dfs(grid, x, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, queue)  &lt;span style=&#34;color:#75715e&#34;&gt;# right&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 1. 找到这两座岛(dfs)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 2. 选择一座，将它不断向外扩展一圈(bfs)已知领域，直到发现了另一座岛&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 深度优先搜索grid 中的 1，再从source中的所有位置开始进行深度优先搜索&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 在向外延伸时，用广度优先搜索&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 找到其中一个小岛&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; len(grid), grid:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, space &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; len(row), row:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; space:  &lt;span style=&#34;color:#75715e&#34;&gt;# 找到一个小岛就退出&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    dfs(grid, x, y, queue)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        steps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Cout Vowel Strings</title>
      <link>http://localhost:1313/posts/cout-vowel-strings/</link>
      <pubDate>Fri, 07 Feb 2025 20:40:23 -0500</pubDate>
      <guid>http://localhost:1313/posts/cout-vowel-strings/</guid>
      <description>&lt;h1 id=&#34;统计字典序元音字符串的数目&#34;&gt;统计字典序元音字符串的数目&lt;/h1&gt;&#xA;&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;给你一个整数&lt;code&gt;n&lt;/code&gt;, 请返回长度为 &lt;code&gt;n&lt;/code&gt; ，仅由元音&lt;code&gt;a&lt;/code&gt;,&lt;code&gt;e&lt;/code&gt;,&lt;code&gt;i&lt;/code&gt;,&lt;code&gt;o&lt;/code&gt;,&lt;code&gt;u&lt;/code&gt; 组成且按&lt;strong&gt;字典序&lt;/strong&gt;排列的字符串数量。&lt;/p&gt;&#xA;&lt;p&gt;字符串 s 按 字典序排列 需要满足：对于所有有效的 i，s[i] 在字母表中的位置总是与 s[i+1] 相同或在 s[i+1] 之前。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：n = 1&#xA;输出：5&#xA;解释：仅由元音组成的 5 个字典序字符串为 [&amp;#34;a&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;i&amp;#34;,&amp;#34;o&amp;#34;,&amp;#34;u&amp;#34;]&#xA;&#xA;输入：n = 2&#xA;输出：15&#xA;解释：仅由元音组成的 15 个字典序字符串为&#xA;[&amp;#34;aa&amp;#34;,&amp;#34;ae&amp;#34;,&amp;#34;ai&amp;#34;,&amp;#34;ao&amp;#34;,&amp;#34;au&amp;#34;,&amp;#34;ee&amp;#34;,&amp;#34;ei&amp;#34;,&amp;#34;eo&amp;#34;,&amp;#34;eu&amp;#34;,&amp;#34;ii&amp;#34;,&amp;#34;io&amp;#34;,&amp;#34;iu&amp;#34;,&amp;#34;oo&amp;#34;,&amp;#34;ou&amp;#34;,&amp;#34;uu&amp;#34;]&#xA;注意，&amp;#34;ea&amp;#34; 不是符合题意的字符串，因为 &amp;#39;e&amp;#39; 在字母表中的位置比 &amp;#39;a&amp;#39; 靠后&#xA;&#xA;输入：n = 33&#xA;输出：66045&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法一-无脑数学&#34;&gt;解法一： 无脑数学&lt;/h2&gt;&#xA;&lt;p&gt;等价于把n个字母分给五种元音，且分配数目可以为零，就是求c(n+4, n) = c(n+4, 4)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; countVowelStrings(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法二-动态规划&#34;&gt;解法二： 动态规划&lt;/h3&gt;&#xA;&lt;p&gt;a可以加在（aeiou）之前，e可以加在(eiou)之前，以此类推&lt;/p&gt;</description>
    </item>
    <item>
      <title>Machine Learning Pipeline</title>
      <link>http://localhost:1313/posts/machine-learning-pipeline/</link>
      <pubDate>Fri, 07 Feb 2025 04:10:33 -0500</pubDate>
      <guid>http://localhost:1313/posts/machine-learning-pipeline/</guid>
      <description>&lt;p&gt;记录一下新学习的技术：&lt;code&gt;k8s machine learning pipeline&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;k8s全名Kubenetes， 用于解决 ml 中过程模糊的问题&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pipeline 顾名思义，多个任务运行相互独立，相互流通必要的输入输出&lt;/li&gt;&#xA;&lt;li&gt;现在传输类型局限为&lt;code&gt;str&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;搭建管道用k8s装饰器&lt;/li&gt;&#xA;&lt;li&gt;指定每个阶段在什么容器环境下运行&lt;/li&gt;&#xA;&lt;li&gt;每个容器不互通，复杂数据（如dataframe）需要从外界获取，如k8s提供的轻量化存储&lt;code&gt;Minio&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;[ extra ]为解决国内docker连接问题和防止公司内部泄密问题，容器储存使用内网搭建的容器管理平台&lt;code&gt;Harbor&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;pipeline-生成方法&#34;&gt;pipeline 生成方法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每一个方框代表一个python方程，这个方程需要指定输入输出，以&lt;code&gt;NamedTuple&lt;/code&gt;来体现&lt;/li&gt;&#xA;&lt;li&gt;由于python在制定类型上模糊，&lt;code&gt;NamedTuple&lt;/code&gt; 本身在python中起到监督python方程写法作用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; NamedTuple&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function_a&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; NamedTuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tuple_name&amp;#39;&lt;/span&gt;, [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outputname_in_func&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outputtype&amp;#39;&lt;/span&gt;)]):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#复杂类型可直接用tuple&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# e.g.  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function_b&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; NamedTuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tuple_name&amp;#39;&lt;/span&gt;, [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outputname_in_func&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outputname_outside_func&amp;#39;&lt;/span&gt;)]):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里会确定这个方程的输入输出：&#xA;这个tuple在degbug中的名称叫‘tuple_name’, 标出你想让这个方程output出来的variable名称， 在return时标明tuple&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tuple_name(output_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;写好方程后，需要告诉pipeline你这个方程在什么环境下运行：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; kfp.components &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; func_to_container_op&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xx_op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func_to_container_op(function_a, base_image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python@3.8&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;连接管道&#34;&gt;连接管道&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; xxx &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; your container function&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; kfp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; kfp.dsl &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; dsl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dsl.pipeline&lt;/span&gt;(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pipeline name&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your pipeline description&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pipeline_main_function&lt;/span&gt;(args):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  连接所有的container&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op1(op1_parm1, &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  op1_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; container1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;outputs[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outputname_outside_func&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 然后在把这个结果作为参数传到下一个container&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kfp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compiler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Compiler()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pipeline_main_function,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      package_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yaml location you want to store&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/_index_of_posts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/_index_of_posts/</guid>
      <description>&lt;p&gt;%% Zoottelkeeper: Beginning of the autogenerated index file list  %%&#xA;[[davidgao7blogs/content/posts/array-summary|array-summary]]&#xA;[[davidgao7blogs/content/posts/binary-tree-path-sum|binary-tree-path-sum]]&#xA;[[davidgao7blogs/content/posts/binaryTree-Output-levely|binaryTree-Output-levely]]&#xA;[[davidgao7blogs/content/posts/copy-random-list|copy-random-list]]&#xA;[[davidgao7blogs/content/posts/cout-vowel-strings|cout-vowel-strings]]&#xA;[[davidgao7blogs/content/posts/divide-arr-into-arr-with-max-diff|divide-arr-into-arr-with-max-diff]]&#xA;[[davidgao7blogs/content/posts/find-kth-largest|find-kth-largest]]&#xA;[[davidgao7blogs/content/posts/go-syntax-learning|go-syntax-learning]]&#xA;[[davidgao7blogs/content/posts/grafana-prometheus|grafana-prometheus]]&#xA;[[davidgao7blogs/content/posts/heap-bst|heap-bst]]&#xA;[[davidgao7blogs/content/posts/jump-game|jump-game]]&#xA;[[davidgao7blogs/content/posts/local-rag-ollama|local-rag-ollama]]&#xA;[[davidgao7blogs/content/posts/lowest-common-ancestor|lowest-common-ancestor]]&#xA;[[davidgao7blogs/content/posts/machine-learning-pipeline|machine-learning-pipeline]]&#xA;[[davidgao7blogs/content/posts/maxLength|maxLength]]&#xA;[[davidgao7blogs/content/posts/merge-k-sorted-lists|merge-k-sorted-lists]]&#xA;[[davidgao7blogs/content/posts/minimum-length-encoding|minimum-length-encoding]]&#xA;[[davidgao7blogs/content/posts/rob|rob]]&#xA;[[davidgao7blogs/content/posts/shortest-bridge|shortest-bridge]]&#xA;[[davidgao7blogs/content/posts/SVM|SVM]]&#xA;[[davidgao7blogs/content/posts/symmetric-tree|symmetric-tree]]&#xA;[[davidgao7blogs/content/posts/TCP-rust|TCP-rust]]&#xA;[[davidgao7blogs/content/posts/valid-word-abbr|valid-word-abbr]]&#xA;[[davidgao7blogs/content/posts/virtual-machine|virtual-machine]]&#xA;%% Zoottelkeeper: End of the autogenerated index file list  %%&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
