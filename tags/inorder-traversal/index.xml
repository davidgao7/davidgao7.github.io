<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inorder Traversal on davidgao7 blog</title>
    <link>https://davidgao7.github.io/tags/inorder-traversal/</link>
    <description>Recent content in Inorder Traversal on davidgao7 blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2025 20:47:06 -0500</lastBuildDate>
    <atom:link href="https://davidgao7.github.io/tags/inorder-traversal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BinaryTree Output Levely</title>
      <link>https://davidgao7.github.io/posts/binarytree-output-levely/</link>
      <pubDate>Fri, 07 Feb 2025 20:47:06 -0500</pubDate>
      <guid>https://davidgao7.github.io/posts/binarytree-output-levely/</guid>
      <description>&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;&#xA;&lt;p&gt;给你一个二叉树，要求一层一层get这个二叉树的层序遍历的结果&lt;/p&gt;&#xA;&lt;p&gt;e.g. Given binary tree: {3,9,20,#,#,15,7}， 在code里是OOP的Tree来写的&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;in order traversal result:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[&#xA;  [3],&#xA;  [9, 20],&#xA;  [15, 7]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意TreeNode的定义，没有child的情况child为&lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;题目思路&#34;&gt;题目思路&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无论何时都得照顾好base case&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果给的tree结构里一个node也没有，我们不用担心什么，直接return 空[]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;levelOrder&lt;/span&gt;(self, root):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; root:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;之后， 我们用python list.pop(index=)来拿到我们想要的current node。 注意一下 &lt;strong&gt;pop()&lt;/strong&gt; 和 &lt;strong&gt;pop(0)&lt;/strong&gt; 的区别&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;pop()&lt;/strong&gt; 是取list中最后一个元素&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;pop(0)&lt;/strong&gt; 是取list中1st元素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3]&#xA;&amp;gt;&amp;gt;&amp;gt; print(a.pop())&#xA;3&#xA;&amp;gt;&amp;gt;&amp;gt; print(a.pop(0))&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;font color=green&gt;Note: &lt;/font&gt;&#xA;平时用不太熟悉的语言时遇到不确定的语法可以到terminal上玩一下当作测试，也节省了上网查找浪费的时间&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注意append node的顺序，我们首先append left child 然后 right child， 因为我们是被要求一层一层从左到右存放的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left: queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right: queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(curnode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个过程是在遍历时先去左边的树再去右边的。按照题目规定&lt;strong&gt;每层&lt;/strong&gt;print时要从左往右储存。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
